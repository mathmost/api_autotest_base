{
  "uid" : "c96a6be0cda47f7c",
  "name" : "test_001",
  "fullName" : "report_demo.cases.test_result.TestResult#test_001",
  "historyId" : "7c158480cb293e9c8f9bb81fd4fb05fb",
  "time" : {
    "start" : 1617446541495,
    "stop" : 1617446541496,
    "duration" : 1
  },
  "description" : "\n         获取测试用例执行结果: 调用001\n        ",
  "descriptionHtml" : "<pre><code>     获取测试用例执行结果: 调用001\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: 实际值: 1 != 预期值: 0",
  "statusTrace" : "self = <report_demo.cases.test_result.TestResult object at 0x0000028CA02DA940>\nsomething = None\n\n    @allure.step(\"test_001\")\n    @allure.story(\"get_result_001\")\n    @pytest.mark.get_result\n    def test_001(self, something):\n        \"\"\"\n         获取测试用例执行结果: 调用001\n        \"\"\"\n        print(\"test_001_something: \", something)\n>       case_data.assert_handle.assert_equal_value(1, 0)\n\ncases\\test_result.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'report_demo.utils.assert_handle.Assertion'>, reality_value = 1\nexpected_value = 0\n\n    @classmethod\n    def assert_equal_value(cls, reality_value, expected_value):\n        \"\"\"\n        校验等于预期值\n        :param reality_value: 实际值\n        :param expected_value: 预期值\n        :return:\n        \"\"\"\n>       assert expected_value == reality_value, \"实际值: {} != 预期值: {}\".format(reality_value, expected_value)\nE       AssertionError: 实际值: 1 != 预期值: 0\n\nutils\\assert_handle.py:25: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "something",
    "time" : {
      "start" : 1617446541495,
      "stop" : 1617446541495,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "fix_module",
    "time" : {
      "start" : 1617446539980,
      "stop" : 1617446540349,
      "duration" : 369
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "登录",
      "time" : {
        "start" : 1617446539980,
        "stop" : 1617446540345,
        "duration" : 365
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "mobile",
        "value" : "17802156123"
      }, {
        "name" : "password",
        "value" : "123456"
      }, {
        "name" : "env_url",
        "value" : "'http://www.niuinfo.com'"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "\n         获取测试用例执行结果: 调用001\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError: 实际值: 1 != 预期值: 0",
    "statusTrace" : "self = <report_demo.cases.test_result.TestResult object at 0x0000028CA02DA940>\nsomething = None\n\n    @allure.step(\"test_001\")\n    @allure.story(\"get_result_001\")\n    @pytest.mark.get_result\n    def test_001(self, something):\n        \"\"\"\n         获取测试用例执行结果: 调用001\n        \"\"\"\n        print(\"test_001_something: \", something)\n>       case_data.assert_handle.assert_equal_value(1, 0)\n\ncases\\test_result.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'report_demo.utils.assert_handle.Assertion'>, reality_value = 1\nexpected_value = 0\n\n    @classmethod\n    def assert_equal_value(cls, reality_value, expected_value):\n        \"\"\"\n        校验等于预期值\n        :param reality_value: 实际值\n        :param expected_value: 预期值\n        :return:\n        \"\"\"\n>       assert expected_value == reality_value, \"实际值: {} != 预期值: {}\".format(reality_value, expected_value)\nE       AssertionError: 实际值: 1 != 预期值: 0\n\nutils\\assert_handle.py:25: AssertionError",
    "steps" : [ {
      "name" : "test_001",
      "time" : {
        "start" : 1617446541495,
        "stop" : 1617446541495,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 实际值: 1 != 预期值: 0\n",
      "statusTrace" : "  File \"C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\BaiduNetdiskDownload\\allure_demo\\report_demo\\cases\\test_result.py\", line 21, in test_001\n    case_data.assert_handle.assert_equal_value(1, 0)\n  File \"D:\\BaiduNetdiskDownload\\allure_demo\\report_demo\\utils\\assert_handle.py\", line 25, in assert_equal_value\n    assert expected_value == reality_value, \"实际值: {} != 预期值: {}\".format(reality_value, expected_value)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "something",
        "value" : "None"
      } ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  },
  "afterStages" : [ {
    "name" : "something::0",
    "time" : {
      "start" : 1617446541500,
      "stop" : 1617446541500,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "fix_module::0",
    "time" : {
      "start" : 1617446541507,
      "stop" : 1617446546647,
      "duration" : 5140
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "get_result_001"
  }, {
    "name" : "feature",
    "value" : "get_result_module"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "tag",
    "value" : "get_result"
  }, {
    "name" : "parentSuite",
    "value" : "report_demo.cases"
  }, {
    "name" : "suite",
    "value" : "test_result"
  }, {
    "name" : "subSuite",
    "value" : "TestResult"
  }, {
    "name" : "host",
    "value" : "DESKTOP-U6DG9EK"
  }, {
    "name" : "thread",
    "value" : "2332-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "report_demo.cases.test_result"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "get_result" ]
  },
  "source" : "c96a6be0cda47f7c.json",
  "parameterValues" : [ ]
}